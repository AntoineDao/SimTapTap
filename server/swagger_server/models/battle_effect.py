# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.battle_hero_ref import BattleHeroRef  # noqa: F401,E501
from swagger_server import util


class BattleEffect(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, type: str=None, target: BattleHeroRef=None, duration: int=None, magnitude: float=None):  # noqa: E501
        """BattleEffect - a model defined in Swagger

        :param type: The type of this BattleEffect.  # noqa: E501
        :type type: str
        :param target: The target of this BattleEffect.  # noqa: E501
        :type target: BattleHeroRef
        :param duration: The duration of this BattleEffect.  # noqa: E501
        :type duration: int
        :param magnitude: The magnitude of this BattleEffect.  # noqa: E501
        :type magnitude: float
        """
        self.swagger_types = {
            'type': str,
            'target': BattleHeroRef,
            'duration': int,
            'magnitude': float
        }

        self.attribute_map = {
            'type': 'type',
            'target': 'target',
            'duration': 'duration',
            'magnitude': 'magnitude'
        }

        self._type = type
        self._target = target
        self._duration = duration
        self._magnitude = magnitude

    @classmethod
    def from_dict(cls, dikt) -> 'BattleEffect':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The BattleEffect of this BattleEffect.  # noqa: E501
        :rtype: BattleEffect
        """
        return util.deserialize_model(dikt, cls)

    @property
    def type(self) -> str:
        """Gets the type of this BattleEffect.

        The type of the effect  # noqa: E501

        :return: The type of this BattleEffect.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: str):
        """Sets the type of this BattleEffect.

        The type of the effect  # noqa: E501

        :param type: The type of this BattleEffect.
        :type type: str
        """
        allowed_values = ["DAMAGE", "POISON", "DOT"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def target(self) -> BattleHeroRef:
        """Gets the target of this BattleEffect.


        :return: The target of this BattleEffect.
        :rtype: BattleHeroRef
        """
        return self._target

    @target.setter
    def target(self, target: BattleHeroRef):
        """Sets the target of this BattleEffect.


        :param target: The target of this BattleEffect.
        :type target: BattleHeroRef
        """

        self._target = target

    @property
    def duration(self) -> int:
        """Gets the duration of this BattleEffect.

        How many rounds the effect lasts  # noqa: E501

        :return: The duration of this BattleEffect.
        :rtype: int
        """
        return self._duration

    @duration.setter
    def duration(self, duration: int):
        """Sets the duration of this BattleEffect.

        How many rounds the effect lasts  # noqa: E501

        :param duration: The duration of this BattleEffect.
        :type duration: int
        """

        self._duration = duration

    @property
    def magnitude(self) -> float:
        """Gets the magnitude of this BattleEffect.

        If applicaple how strong the effect is (for example the amount of damage dealt or the amount of hp healed)  # noqa: E501

        :return: The magnitude of this BattleEffect.
        :rtype: float
        """
        return self._magnitude

    @magnitude.setter
    def magnitude(self, magnitude: float):
        """Sets the magnitude of this BattleEffect.

        If applicaple how strong the effect is (for example the amount of damage dealt or the amount of hp healed)  # noqa: E501

        :param magnitude: The magnitude of this BattleEffect.
        :type magnitude: float
        """

        self._magnitude = magnitude
