# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class ClassGuildTech(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, tier1: int=None, tier2: int=None, tier3: int=None, tier4: int=None, tier5: int=None):  # noqa: E501
        """ClassGuildTech - a model defined in Swagger

        :param tier1: The tier1 of this ClassGuildTech.  # noqa: E501
        :type tier1: int
        :param tier2: The tier2 of this ClassGuildTech.  # noqa: E501
        :type tier2: int
        :param tier3: The tier3 of this ClassGuildTech.  # noqa: E501
        :type tier3: int
        :param tier4: The tier4 of this ClassGuildTech.  # noqa: E501
        :type tier4: int
        :param tier5: The tier5 of this ClassGuildTech.  # noqa: E501
        :type tier5: int
        """
        self.swagger_types = {
            'tier1': int,
            'tier2': int,
            'tier3': int,
            'tier4': int,
            'tier5': int
        }

        self.attribute_map = {
            'tier1': 'tier1',
            'tier2': 'tier2',
            'tier3': 'tier3',
            'tier4': 'tier4',
            'tier5': 'tier5'
        }

        self._tier1 = tier1
        self._tier2 = tier2
        self._tier3 = tier3
        self._tier4 = tier4
        self._tier5 = tier5

    @classmethod
    def from_dict(cls, dikt) -> 'ClassGuildTech':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ClassGuildTech of this ClassGuildTech.  # noqa: E501
        :rtype: ClassGuildTech
        """
        return util.deserialize_model(dikt, cls)

    @property
    def tier1(self) -> int:
        """Gets the tier1 of this ClassGuildTech.

        The level of the first tier of guild tech  # noqa: E501

        :return: The tier1 of this ClassGuildTech.
        :rtype: int
        """
        return self._tier1

    @tier1.setter
    def tier1(self, tier1: int):
        """Sets the tier1 of this ClassGuildTech.

        The level of the first tier of guild tech  # noqa: E501

        :param tier1: The tier1 of this ClassGuildTech.
        :type tier1: int
        """
        if tier1 is not None and tier1 > 60:  # noqa: E501
            raise ValueError("Invalid value for `tier1`, must be a value less than or equal to `60`")  # noqa: E501
        if tier1 is not None and tier1 < 0:  # noqa: E501
            raise ValueError("Invalid value for `tier1`, must be a value greater than or equal to `0`")  # noqa: E501

        self._tier1 = tier1

    @property
    def tier2(self) -> int:
        """Gets the tier2 of this ClassGuildTech.

        The level of the second tier of guild tech  # noqa: E501

        :return: The tier2 of this ClassGuildTech.
        :rtype: int
        """
        return self._tier2

    @tier2.setter
    def tier2(self, tier2: int):
        """Sets the tier2 of this ClassGuildTech.

        The level of the second tier of guild tech  # noqa: E501

        :param tier2: The tier2 of this ClassGuildTech.
        :type tier2: int
        """
        if tier2 is not None and tier2 > 50:  # noqa: E501
            raise ValueError("Invalid value for `tier2`, must be a value less than or equal to `50`")  # noqa: E501
        if tier2 is not None and tier2 < 0:  # noqa: E501
            raise ValueError("Invalid value for `tier2`, must be a value greater than or equal to `0`")  # noqa: E501

        self._tier2 = tier2

    @property
    def tier3(self) -> int:
        """Gets the tier3 of this ClassGuildTech.

        The level of the third tier of guild tech  # noqa: E501

        :return: The tier3 of this ClassGuildTech.
        :rtype: int
        """
        return self._tier3

    @tier3.setter
    def tier3(self, tier3: int):
        """Sets the tier3 of this ClassGuildTech.

        The level of the third tier of guild tech  # noqa: E501

        :param tier3: The tier3 of this ClassGuildTech.
        :type tier3: int
        """
        if tier3 is not None and tier3 > 40:  # noqa: E501
            raise ValueError("Invalid value for `tier3`, must be a value less than or equal to `40`")  # noqa: E501
        if tier3 is not None and tier3 < 0:  # noqa: E501
            raise ValueError("Invalid value for `tier3`, must be a value greater than or equal to `0`")  # noqa: E501

        self._tier3 = tier3

    @property
    def tier4(self) -> int:
        """Gets the tier4 of this ClassGuildTech.

        The level of the fourth tier of guild tech  # noqa: E501

        :return: The tier4 of this ClassGuildTech.
        :rtype: int
        """
        return self._tier4

    @tier4.setter
    def tier4(self, tier4: int):
        """Sets the tier4 of this ClassGuildTech.

        The level of the fourth tier of guild tech  # noqa: E501

        :param tier4: The tier4 of this ClassGuildTech.
        :type tier4: int
        """
        if tier4 is not None and tier4 > 30:  # noqa: E501
            raise ValueError("Invalid value for `tier4`, must be a value less than or equal to `30`")  # noqa: E501
        if tier4 is not None and tier4 < 0:  # noqa: E501
            raise ValueError("Invalid value for `tier4`, must be a value greater than or equal to `0`")  # noqa: E501

        self._tier4 = tier4

    @property
    def tier5(self) -> int:
        """Gets the tier5 of this ClassGuildTech.

        The level of the fifth tier of guild tech  # noqa: E501

        :return: The tier5 of this ClassGuildTech.
        :rtype: int
        """
        return self._tier5

    @tier5.setter
    def tier5(self, tier5: int):
        """Sets the tier5 of this ClassGuildTech.

        The level of the fifth tier of guild tech  # noqa: E501

        :param tier5: The tier5 of this ClassGuildTech.
        :type tier5: int
        """
        if tier5 is not None and tier5 > 20:  # noqa: E501
            raise ValueError("Invalid value for `tier5`, must be a value less than or equal to `20`")  # noqa: E501
        if tier5 is not None and tier5 < 0:  # noqa: E501
            raise ValueError("Invalid value for `tier5`, must be a value greater than or equal to `0`")  # noqa: E501

        self._tier5 = tier5
