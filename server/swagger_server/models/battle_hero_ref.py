# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class BattleHeroRef(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, team: str=None, row: str=None, index: int=None):  # noqa: E501
        """BattleHeroRef - a model defined in Swagger

        :param team: The team of this BattleHeroRef.  # noqa: E501
        :type team: str
        :param row: The row of this BattleHeroRef.  # noqa: E501
        :type row: str
        :param index: The index of this BattleHeroRef.  # noqa: E501
        :type index: int
        """
        self.swagger_types = {
            'team': str,
            'row': str,
            'index': int
        }

        self.attribute_map = {
            'team': 'team',
            'row': 'row',
            'index': 'index'
        }

        self._team = team
        self._row = row
        self._index = index

    @classmethod
    def from_dict(cls, dikt) -> 'BattleHeroRef':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The BattleHeroRef of this BattleHeroRef.  # noqa: E501
        :rtype: BattleHeroRef
        """
        return util.deserialize_model(dikt, cls)

    @property
    def team(self) -> str:
        """Gets the team of this BattleHeroRef.

        Which side of the battle the referenced hero is on  # noqa: E501

        :return: The team of this BattleHeroRef.
        :rtype: str
        """
        return self._team

    @team.setter
    def team(self, team: str):
        """Sets the team of this BattleHeroRef.

        Which side of the battle the referenced hero is on  # noqa: E501

        :param team: The team of this BattleHeroRef.
        :type team: str
        """
        allowed_values = ["ATTACKING", "DEFENDING"]  # noqa: E501
        if team not in allowed_values:
            raise ValueError(
                "Invalid value for `team` ({0}), must be one of {1}"
                .format(team, allowed_values)
            )

        self._team = team

    @property
    def row(self) -> str:
        """Gets the row of this BattleHeroRef.

        Is the hero in the front or the rear  # noqa: E501

        :return: The row of this BattleHeroRef.
        :rtype: str
        """
        return self._row

    @row.setter
    def row(self, row: str):
        """Sets the row of this BattleHeroRef.

        Is the hero in the front or the rear  # noqa: E501

        :param row: The row of this BattleHeroRef.
        :type row: str
        """
        allowed_values = ["FRONT", "REAR"]  # noqa: E501
        if row not in allowed_values:
            raise ValueError(
                "Invalid value for `row` ({0}), must be one of {1}"
                .format(row, allowed_values)
            )

        self._row = row

    @property
    def index(self) -> int:
        """Gets the index of this BattleHeroRef.

        In which place the hero is  # noqa: E501

        :return: The index of this BattleHeroRef.
        :rtype: int
        """
        return self._index

    @index.setter
    def index(self, index: int):
        """Sets the index of this BattleHeroRef.

        In which place the hero is  # noqa: E501

        :param index: The index of this BattleHeroRef.
        :type index: int
        """
        if index is not None and index > 3:  # noqa: E501
            raise ValueError("Invalid value for `index`, must be a value less than or equal to `3`")  # noqa: E501
        if index is not None and index < 1:  # noqa: E501
            raise ValueError("Invalid value for `index`, must be a value greater than or equal to `1`")  # noqa: E501

        self._index = index
