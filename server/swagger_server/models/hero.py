# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.hero_equipment import HeroEquipment  # noqa: F401,E501
from swagger_server import util


class Hero(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, level: int=None, stars: int=None, tier: int=None, equipment: HeroEquipment=None):  # noqa: E501
        """Hero - a model defined in Swagger

        :param id: The id of this Hero.  # noqa: E501
        :type id: str
        :param level: The level of this Hero.  # noqa: E501
        :type level: int
        :param stars: The stars of this Hero.  # noqa: E501
        :type stars: int
        :param tier: The tier of this Hero.  # noqa: E501
        :type tier: int
        :param equipment: The equipment of this Hero.  # noqa: E501
        :type equipment: HeroEquipment
        """
        self.swagger_types = {
            'id': str,
            'level': int,
            'stars': int,
            'tier': int,
            'equipment': HeroEquipment
        }

        self.attribute_map = {
            'id': 'id',
            'level': 'level',
            'stars': 'stars',
            'tier': 'tier',
            'equipment': 'equipment'
        }

        self._id = id
        self._level = level
        self._stars = stars
        self._tier = tier
        self._equipment = equipment

    @classmethod
    def from_dict(cls, dikt) -> 'Hero':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Hero of this Hero.  # noqa: E501
        :rtype: Hero
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this Hero.

        Which hero is requested.  # noqa: E501

        :return: The id of this Hero.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this Hero.

        Which hero is requested.  # noqa: E501

        :param id: The id of this Hero.
        :type id: str
        """
        allowed_values = ["sawMachine", "scarlet"]  # noqa: E501
        if id not in allowed_values:
            raise ValueError(
                "Invalid value for `id` ({0}), must be one of {1}"
                .format(id, allowed_values)
            )

        self._id = id

    @property
    def level(self) -> int:
        """Gets the level of this Hero.

        The numerical level of the hero (1-200)  # noqa: E501

        :return: The level of this Hero.
        :rtype: int
        """
        return self._level

    @level.setter
    def level(self, level: int):
        """Sets the level of this Hero.

        The numerical level of the hero (1-200)  # noqa: E501

        :param level: The level of this Hero.
        :type level: int
        """
        if level is not None and level > 200:  # noqa: E501
            raise ValueError("Invalid value for `level`, must be a value less than or equal to `200`")  # noqa: E501
        if level is not None and level < 1:  # noqa: E501
            raise ValueError("Invalid value for `level`, must be a value greater than or equal to `1`")  # noqa: E501

        self._level = level

    @property
    def stars(self) -> int:
        """Gets the stars of this Hero.

        The number of stars the hero has  # noqa: E501

        :return: The stars of this Hero.
        :rtype: int
        """
        return self._stars

    @stars.setter
    def stars(self, stars: int):
        """Sets the stars of this Hero.

        The number of stars the hero has  # noqa: E501

        :param stars: The stars of this Hero.
        :type stars: int
        """
        if stars is not None and stars > 9:  # noqa: E501
            raise ValueError("Invalid value for `stars`, must be a value less than or equal to `9`")  # noqa: E501
        if stars is not None and stars < 1:  # noqa: E501
            raise ValueError("Invalid value for `stars`, must be a value greater than or equal to `1`")  # noqa: E501

        self._stars = stars

    @property
    def tier(self) -> int:
        """Gets the tier of this Hero.

        The tier of the hero (i.e. the number of purple gems below the name)  # noqa: E501

        :return: The tier of this Hero.
        :rtype: int
        """
        return self._tier

    @tier.setter
    def tier(self, tier: int):
        """Sets the tier of this Hero.

        The tier of the hero (i.e. the number of purple gems below the name)  # noqa: E501

        :param tier: The tier of this Hero.
        :type tier: int
        """
        if tier is not None and tier > 6:  # noqa: E501
            raise ValueError("Invalid value for `tier`, must be a value less than or equal to `6`")  # noqa: E501
        if tier is not None and tier < 0:  # noqa: E501
            raise ValueError("Invalid value for `tier`, must be a value greater than or equal to `0`")  # noqa: E501

        self._tier = tier

    @property
    def equipment(self) -> HeroEquipment:
        """Gets the equipment of this Hero.


        :return: The equipment of this Hero.
        :rtype: HeroEquipment
        """
        return self._equipment

    @equipment.setter
    def equipment(self, equipment: HeroEquipment):
        """Sets the equipment of this Hero.


        :param equipment: The equipment of this Hero.
        :type equipment: HeroEquipment
        """
        if equipment is None:
            raise ValueError("Invalid value for `equipment`, must not be `None`")  # noqa: E501

        self._equipment = equipment
